import {
  IAutoViewCompilerMetadata,
  IAutoViewComponentProps,
} from "@autoview/interface";
import { ChatGptTypeChecker } from "@samchon/openapi";
import typia from "typia";

import { AllInOne, CodeGeneration, PlanGeneration } from "../passes";
import { IAutoViewVendor } from "../structures";

/**
 * Configuration of the {@link AutoViewAgent}.
 */
export interface IAutoViewConfig {
  /**
   * The vendor of the entire agent pipeline.
   */
  vendor: IAutoViewVendor;

  /**
   * The vendor of the code generation.
   *
   * If not provided, the same vendor as the `vendor` will be used.
   */
  codeVendor?: IAutoViewVendor;

  /**
   * The input schema to be transformed.
   */
  inputSchema: IAutoViewCompilerMetadata;

  /**
   * The name of the transform function generated by the agent.
   *
   * Give different names if you plan to generate multiple transform functions to prevent name conflicts.
   *
   * If not provided, the default name will be `transform`.
   *
   * @default "transform"
   */
  transformFunctionName?: string;

  /**
   * Whether to use the experimental all-in-one agent, instead of the default pipeline.
   *
   * @default false
   */
  experimentalAllInOne?: boolean;
}

/**
 * Result of the {@link AutoViewAgent}.
 */
export interface IAutoViewResult {
  /**
   * The TypeScript code of the transform function.
   *
   * This code includes several import statements, preventing it to include bunch of DTO interface declarations.
   */
  transformTsCode: string;
}

/**
 * The `AutoViewAgent`.
 *
 * This is the class that orchestrates the entire agent pipeline.
 */
export class AutoViewAgent {
  constructor(private config: IAutoViewConfig) {}

  /**
   * Execute the agent pipeline.
   *
   * It generates the TypeScript code of the transform function from the input schema into the AutoView component.
   *
   * @returns The result of the agent pipeline.
   */
  async generate(): Promise<IAutoViewResult> {
    if (this.config.experimentalAllInOne) {
      return this.generateWithAllInOne();
    } else {
      return this.generateWithPlanGeneration();
    }
  }

  private async generateWithPlanGeneration(): Promise<IAutoViewResult> {
    const planGenerationAgent = new PlanGeneration.Agent();
    await planGenerationAgent.open();

    const codeGenerationAgent = new CodeGeneration.Agent();
    await codeGenerationAgent.open();

    try {
      const components = componentSchema();
      const plan = await planGenerationAgent.execute({
        vendor: this.config.vendor,
        inputSchema: this.config.inputSchema,
        componentSchema: components,
      });
      const { transformTsCode } = await codeGenerationAgent.execute({
        vendor: this.config.codeVendor ?? this.config.vendor,
        inputSchema: this.config.inputSchema,
        componentSchema: components,
        initialAnalysis: plan.initial_analysis,
        dataExploration: plan.data_exploration,
        ideas: plan.ideas,
        reasoning: plan.reasoning,
        planning: plan.planning,
        transformFunctionName: this.config.transformFunctionName ?? "transform",
      });

      return {
        transformTsCode,
      };
    } finally {
      try {
        await planGenerationAgent.close();
      } catch (error) {
        console.warn(`failed to close plan generation agent: ${error}`);
      }
      try {
        await codeGenerationAgent.close();
      } catch (error) {
        console.warn(`failed to close code generation agent: ${error}`);
      }
    }
  }

  private async generateWithAllInOne(): Promise<IAutoViewResult> {
    const allInOneAgent = new AllInOne.Agent();
    await allInOneAgent.open();

    try {
      const components = componentSchema();
      const result = await allInOneAgent.execute({
        vendor: this.config.vendor,
        inputSchema: this.config.inputSchema,
        componentSchema: components,
        transformFunctionName: this.config.transformFunctionName ?? "transform",
      });

      return {
        transformTsCode: result.transformTsCode,
      };
    } finally {
      try {
        await allInOneAgent.close();
      } catch (error) {
        console.warn(`failed to close all-in-one agent: ${error}`);
      }
    }
  }
}

function componentSchema(): IAutoViewCompilerMetadata {
  if (!ChatGptTypeChecker.isObject(PARAMETERS)) {
    throw new Error("PARAMETERS is not an object.");
  }

  return {
    $defs: PARAMETERS.$defs,
    schema: PARAMETERS.properties["props"]!,
  };
}

const PARAMETERS = typia.llm.parameters<
  {
    props: IAutoViewComponentProps;
  },
  "chatgpt",
  {
    reference: true;
  }
>();
