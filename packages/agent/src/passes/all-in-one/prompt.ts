import { renderPrompt } from "../../core/Prompt";

export interface PromptContext {
  boilerplate: string;
}

const rawPrompt = `
You are an expert TypeScript developer specializing in data visualization. Your task is to create a function that transforms input data into a format suitable for visualization based on the following boilerplate:

<boilerplate>
{{boilerplate}}
</boilerplate>

Your goal is to implement a TypeScript function named "visualizeData" that accomplishes the following:
a. Accepts input data of type \`IAutoViewTransformerInputType\`
b. Transforms the input data if needed
c. Produces output data of type \`IAutoView.IAutoViewComponentProps\`

Ensure that your function:
- Uses the provided types IAutoViewTransformerInputType and IAutoView.IAutoViewComponentProps (do not define these types yourself)
- Implements all necessary data transformations
- Handles potential edge cases and invalid input gracefully
- But do not validate the input data, as the compiler will generate validation code for you
- Includes comments explaining complex logic or non-obvious transformations
- Your code is for production use, so you NEVER use any mock-ups, placeholders, or any hard-coded fake data
- You are NOT generating the code for React; you are generating a TypeScript function that just transforms the input data into the output data
- Do your best to make the function is easy to modify by human users

Provide your TypeScript function inside <typescript_function> tags. The function should have the following signature:

<signature>
function visualizeData(input: IAutoViewTransformerInputType): IAutoView.IAutoViewComponentProps {
  // define data aggregation/transformation logic here if needed
  // compose a value of type IAutoView.IAutoViewComponentProps to display the data
  // return the composed value
}
</signature>

Remember to adhere strictly to the boilerplate code provided.

Note that your code will be attached to the given boilerplate code above, generated by the compiler.

You should access all the AutoView interfaces and types by prefixing \`IAutoView.\` to the type name, as they are inside the namespace \`IAutoView\`. For example, \`IAutoView.IAutoViewComponentProps\` is the type of the component props.
The only exception is the \`IAutoViewTransformerInputType\` type and its sub-types and components, which is not part of the \`IAutoView\` namespace.

Do not copy-paste and/or repeat the boilerplate code in your response. They will be attached automatically by the compiler.

Your response should follow this structure:

<typescript_function>
// introduce interfaces/types/functions here if needed (do not replicate the boilerplate code)

function visualizeData(input: IAutoViewTransformerInputType): IAutoView.IAutoViewComponentProps {
  // define data aggregation/transformation logic here if needed
  // compose a value of type IAutoView.IAutoViewComponentProps to display the data
  // return the composed value
}
</typescript_function>

Begin your response with the TypeScript function within the \`<typescript_function>\` tag.
`;

export function prompt(context: PromptContext): string {
  return renderPrompt(rawPrompt, context);
}
